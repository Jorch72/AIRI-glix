package com.arisux.airi;

import java.util.Arrays;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.creativetab.CreativeTabs;

import com.arisux.airi.api.obj3dapi.Obj3DAPI;
import com.arisux.airi.api.remapping.RemappingAPI;
import com.arisux.airi.api.updater.Updater;
import com.arisux.airi.api.updater.UpdaterAPI;
import com.arisux.airi.api.window.WindowAPI;
import com.arisux.airi.lib.BlockTypes.HookedBlock;

import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.event.*;
import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.relauncher.Side;

@Mod(modid = Properties.MODID, name = Properties.MODID, version = Properties.VERSION)
public class AIRI
{
	public static Block WORLDGEN_GHOST;
	public static boolean COREMOD_INITIALIZED;

	public static Logger logger = new Logger();
	private Properties properties = new Properties();
	public LocalEventHandler events;
	public GuiElementHandler guiElementHandler;
	public Settings settings;
	public Updater updater;
	
	private WindowAPI windowAPI;
	private UpdaterAPI updaterAPI;
	private Obj3DAPI obj3dAPI;
	private RemappingAPI remappingAPI;

	@Mod.Instance(Properties.MODID)
	private static AIRI instance;

	public static AIRI instance()
	{
		return instance;
	}
	
	public static Properties properties()
	{
		return instance().properties;
	}
	
	public static Settings settings()
	{
		return instance().settings;
	}

	public static class Logger
	{
		public void info(String info, Object... args)
		{
			System.out.println(String.format("[AIRI/INFO] %s", String.format(info, args)));
		}

		public void bug(String info, Object... args)
		{
			System.out.println(String.format("[AIRI/BUG] %s. This should not happen, report it.", String.format(info, args)));
		}

		public void warning(String warning, Object... args)
		{
			System.out.println(String.format("[AIRI/WARNING] %s", String.format(warning, args)));
		}
	}

	@Mod.EventHandler
	public void preInit(FMLPreInitializationEvent event)
	{
		logger.info("[AIRI] Copyright(C) 2013-2015 Arisux");

		(settings = new Settings()).preInitialize(event);

		event.getModMetadata().autogenerated = false;
		event.getModMetadata().modId = Properties.MODID;
		event.getModMetadata().name = Properties.MODID;
		event.getModMetadata().version = Properties.VERSION;
		event.getModMetadata().credits = "The Minecraft Community";
		event.getModMetadata().authorList = Arrays.asList("Ri5ux");
		event.getModMetadata().description = "N/A";
		event.getModMetadata().url = settings().getServer() + "/page/mods/airi/";
		event.getModMetadata().updateUrl = "";
		event.getModMetadata().screenshots = new String[0];
		event.getModMetadata().logoFile = "";

		(remappingAPI = new RemappingAPI()).preInitialize(event);
		(events = new LocalEventHandler()).preInitialize(event);
		(guiElementHandler = new GuiElementHandler()).preInitialize(event);

		if (FMLCommonHandler.instance().getSide() == Side.CLIENT)
		{
			this.windowAPI = new WindowAPI();
			this.updaterAPI = new UpdaterAPI();
			this.obj3dAPI = new Obj3DAPI();
		}
	}

	@Mod.EventHandler
	public void postInitialize(FMLPostInitializationEvent event)
	{
		if (FMLCommonHandler.instance().getSide() == Side.CLIENT)
		{
			(updater = updaterAPI.createNewUpdater(Properties.MODID, Properties.VERSION, settings.getServer() + "/page/mods/airi/latest.txt", settings.getServer() + "/page/mods/airi/", settings.getServer() + "/page/mods/airi/changelog.txt")).postInitialize(event);
		}
		
		GameRegistry.registerBlock(WORLDGEN_GHOST = (new HookedBlock(Material.air)).setCreativeTab(CreativeTabs.tabAllSearch), "airi.wgghost");
	}

	@Mod.EventHandler
	public void onLoadMissingMapping(FMLMissingMappingsEvent event)
	{
		(remappingAPI).onLoadMissingMapping(event);
	}

	public void disableNetworking(String reason)
	{
		AIRI.logger.warning("Networking was disabled. " + reason);
		AIRI.settings().setNetworking(false);
	}

	public static void setASMInitialized(boolean b)
	{
		COREMOD_INITIALIZED = b;
	}
	
	public static RemappingAPI remappingApi()
	{
		return AIRI.instance().remappingAPI;
	}
	
	public static UpdaterAPI updaterApi()
	{
		return AIRI.instance().updaterAPI;
	}
	
	public static WindowAPI windowApi()
	{
		return AIRI.instance().windowAPI;
	}
	
	public static Obj3DAPI obj3dApi()
	{
		return AIRI.instance().obj3dAPI;
	}
}
